I"Ò<h2 id="what-is-argparse">What is argparse?</h2>
<p>The Python <code class="language-plaintext highlighter-rouge">argparse</code> module defines what arguments it requires, and <code class="language-plaintext highlighter-rouge">argparse</code> will figure out how to parse those out of <code class="language-plaintext highlighter-rouge">sys.argv</code>. It also automatically generates help and usage messages and issues errors when users give the program incalid arguments.</p>

<h2 id="how-to-use-the-argparse-program">How to use the <code class="language-plaintext highlighter-rouge">argparse</code> program?</h2>
<p><strong>create an ArgumentParser object</strong></p>

<p><code class="language-plaintext highlighter-rouge">parser = argparse.ArgumentParse(description="Process some integers")</code></p>

<ul>
  <li>description: a brief description of what the program does and how it works.</li>
</ul>

<p><strong>add argument</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parser.add_argument('integers', metavar='N', type=int, nargs="+", help='an integer for the accumulator')
parser.add_argument('--sum', const=sum, default=max, help='sum the integers (default: find the max)')
</code></pre></div></div>

<ul>
  <li>nargs=‚Äù+‚Äù: ‚Äò+‚Äô just like ‚Äò*‚Äô, all command-line args present are gathered into a list.</li>
  <li>help message: when type <code class="language-plaintext highlighter-rouge">python &lt;name of script&gt; -h</code>, it shows a list of available arguments and its associated help message if the help message is specified in <code class="language-plaintext highlighter-rouge">ArgumentParser</code> object.</li>
  <li></li>
</ul>

<p><strong>parse argument</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>parser.parse_args(['--sum', '7', '-1', '-42'])
=&gt; Namespace(accumulate=&lt;built-in function sum&gt;, integers=[7, -1, 42])
</code></pre></div></div>

<ul>
  <li>The <code class="language-plaintext highlighter-rouge">Namespace</code> object: it is an object created by the <code class="language-plaintext highlighter-rouge">argparse.Namespace</code> class used by default by <code class="language-plaintext highlighter-rouge">parse_args()</code>. This object holds attributes and its value in the <code class="language-plaintext highlighter-rouge">ArgumentParser</code> object.</li>
</ul>

<p>Example 1:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>args = parser.parse_args(['--foo', BAR]) =&gt; type(args) is an Namespace object
vars(args) =&gt; {'foo': 'BAR'}
</code></pre></div></div>

<p>Example 2: have an <code class="language-plaintext highlighter-rouge">ArgmentPaser</code> assign attributes to an already existing object, rather than a new <code class="language-plaintext highlighter-rouge">NameSpace</code> object.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class C:
    pass
c = C()
parser = argparse.ArgumentParser()
parser.add_argument('--foo')
parser.parse_args(['--foo', BAR], namespace=c)
c.foo =&gt; 'BAR'
</code></pre></div></div>

<p>Example 3: directly create a Namespace object</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from argparse import Namespace
args = Namespace(foo='bar')
</code></pre></div></div>
<ul>
  <li>Namespace object can be saved and re-loaded using pickle.</li>
</ul>
:ET